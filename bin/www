#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('risk-attack-2-0:server');
var http = require('http');
/*const socketIO = require('socket.io');
const server = http.createServer(app);
const io = socketIO(server);*/
// const socket = require('../socket/');
const socketio = require('socket.io');
const formatMessage = require('../utils/messages.js');


const {
  userJoin,
  getCurrentUser,
  userLeave,
  getRoomUsers
} = require('../utils/users');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketio(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



io.on('connection', socket => {

  socket.on('joinRoom',({username,room})=> {
    const user = userJoin(socket.id, username, room);

    socket.join(user.room);


    //Broadcast when a user connects
    socket.broadcast
        .to(user.room)
        .emit('message', formatMessage(`${user.username} joined the chat`));

    //Send users and room info
    io.to(user.room).emit('roomUsers',{
      room: user.room,
      users: getRoomUsers(user.room)
    });
  });



// Listen for chatMessage
socket.on('chatMessage', msg => {
  const user = getCurrentUser(socket.id);


  // console.log(msg);
  io.to(user.room).emit('message', formatMessage(user.username, msg));

});


//run when client disconnects
socket.on('disconnect', () => {
  const user = userLeave(socket.id);

  if(user){
    io.to(user.room).emit('message',
        formatMessage(`${user.username} left the chat`));

    //send users and room info
    io.to(user.room).emit('roomUsers',{
      room: user.room,
      users: getRoomUsers(user.room)
    });
  }
});

});
